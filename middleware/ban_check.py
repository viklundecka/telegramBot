from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject, Message, CallbackQuery
from storage.json_storage import JSONStorage
import logging

logger = logging.getLogger(__name__)


class BanCheckMiddleware(BaseMiddleware):
    def __init__(self):
        self.storage = JSONStorage()

    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        if isinstance(event, (Message, CallbackQuery)):
            user_id = event.from_user.id

            is_banned = await self.storage.is_user_banned(user_id)

            if is_banned:
                ban_info = await self.storage.get_ban_info(user_id)

                ban_message = f"""
üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã**

**–ü—Ä–∏—á–∏–Ω–∞:** {ban_info.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
**–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {ban_info.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}

–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.
"""

                if isinstance(event, Message):
                    await event.answer(ban_message, parse_mode="Markdown")
                elif isinstance(event, CallbackQuery):
                    await event.answer("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", show_alert=True)

                logger.info(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return

        return await handler(event, data)
