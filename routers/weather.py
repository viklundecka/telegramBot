from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from config.settings import WEATHERSTACK_API_KEY
from services.api_client import WeatherstackAPI
from utils.formatters import format_weather_message
from keyboards.inline import get_main_menu, get_back_button
from states import WeatherStates
from storage.json_storage import JSONStorage

router = Router()
weather_api = WeatherstackAPI(WEATHERSTACK_API_KEY) if WEATHERSTACK_API_KEY else None
storage = JSONStorage()
logger = logging.getLogger(__name__)


@router.message(Command("weather"))
async def weather_command(message: Message, state: FSMContext):
    if not weather_api:
        await message.answer(
            "‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á Weatherstack.",
            reply_markup=get_main_menu()
        )
        return

    await message.answer(
        "üå§ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: *–ú–æ—Å–∫–≤–∞*, *London*, *New York*, *–ü–∞—Ä–∏–∂*",
        reply_markup=get_back_button(),
        parse_mode="Markdown"
    )
    await state.set_state(WeatherStates.waiting_for_city)
    await storage.update_user_activity(message.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã")


@router.callback_query(F.data == "weather")
async def weather_callback(callback: CallbackQuery, state: FSMContext):
    if not weather_api:
        await callback.message.edit_text(
            "‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
            "–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω API –∫–ª—é—á Weatherstack.",
            reply_markup=get_main_menu()
        )
        return

    await callback.message.edit_text(
        "üå§ **–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: *–ú–æ—Å–∫–≤–∞*, *London*, *New York*, *–ü–∞—Ä–∏–∂*",
        reply_markup=get_back_button(),
        parse_mode="Markdown"
    )
    await state.set_state(WeatherStates.waiting_for_city)
    await storage.update_user_activity(callback.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–≥–æ–¥—ã")


@router.message(WeatherStates.waiting_for_city)
async def process_city_name(message: Message, state: FSMContext):
    city = message.text.strip()

    if len(city) < 2 or len(city) > 50:
        await message.answer(
            "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞**\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –û—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã\n"
            "‚Ä¢ –ë–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_button(),
            parse_mode="Markdown"
        )
        return

    processing_msg = await message.answer(
        f"üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ **{city}**...\n"
        "‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        parse_mode="Markdown"
    )

    weather_data = await weather_api.get_weather(city)

    if weather_data:
        formatted_message = format_weather_message(weather_data)
        await processing_msg.edit_text(
            formatted_message,
            reply_markup=get_main_menu(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
    else:
        await processing_msg.edit_text(
            f"‚ùå **–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_back_button(),
            parse_mode="Markdown"
        )
        logger.warning(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id})")
        return

    await state.clear()
    await storage.update_user_activity(message.from_user.id)


@router.callback_query(F.data.startswith("city_"))
async def weather_for_favorite_city(callback: CallbackQuery):
    city = callback.data.replace("city_", "")

    if not weather_api:
        await callback.answer("‚ùå –°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return

    await callback.answer("üîÑ –ü–æ–ª—É—á–∞—é –ø–æ–≥–æ–¥—É...")

    await callback.message.edit_text(
        f"üîÑ –ü–æ–ª—É—á–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –¥–ª—è **{city}**...",
        parse_mode="Markdown"
    )

    weather_data = await weather_api.get_weather(city)

    if weather_data:
        formatted_message = format_weather_message(weather_data)
        await callback.message.edit_text(
            formatted_message,
            reply_markup=get_main_menu(),
            parse_mode="Markdown"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –ø–æ–≥–æ–¥—É –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞: {city}")
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ **{city}**\n\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å API –∏–ª–∏ –≥–æ—Ä–æ–¥ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_main_menu(),
            parse_mode="Markdown"
        )

    await storage.update_user_activity(callback.from_user.id)


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")