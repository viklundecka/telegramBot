from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from keyboards.inline import get_favorites_menu, get_main_menu
from keyboards.builders import build_cities_keyboard
from states import FavoriteStates
from storage.json_storage import JSONStorage
from utils.formatters import format_user_list
from filters.text_length_filter import TextLengthFilter

router = Router()
storage = JSONStorage()
logger = logging.getLogger(__name__)


@router.message(Command("favorites"))
async def favorites_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏:",
        reply_markup=get_favorites_menu()
    )
    await storage.update_user_activity(message.from_user.id)


@router.callback_query(F.data == "favorites")
async def favorites_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏:",
        reply_markup=get_favorites_menu()
    )
    await storage.update_user_activity(callback.from_user.id)


@router.callback_query(F.data == "show_favorites")
async def show_favorites_callback(callback: CallbackQuery):
    favorites = await storage.get_favorites(callback.from_user.id)

    if favorites:
        keyboard = build_cities_keyboard(favorites)
        await callback.message.edit_text(
            "‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.\n\n–î–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã!",
            reply_markup=get_favorites_menu()
        )

    await storage.update_user_activity(callback.from_user.id)


@router.callback_query(F.data == "add_favorite")
async def add_favorite_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ûï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:",
        reply_markup=get_favorites_menu()
    )
    await state.set_state(FavoriteStates.waiting_for_add_city)


@router.message(FavoriteStates.waiting_for_add_city, TextLengthFilter(min_length=2, max_length=50))
async def process_add_favorite(message: Message, state: FSMContext):
    city = message.text.strip().title()

    success = await storage.add_favorite(message.from_user.id, city)

    if success:
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            reply_markup=get_favorites_menu()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –≥–æ—Ä–æ–¥ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {city}")
    else:
        await message.answer(
            f"‚ÑπÔ∏è –ì–æ—Ä–æ–¥ '{city}' —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º.",
            reply_markup=get_favorites_menu()
        )

    await state.clear()
    await storage.update_user_activity(message.from_user.id)


@router.callback_query(F.data == "remove_favorite")
async def remove_favorite_callback(callback: CallbackQuery, state: FSMContext):
    favorites = await storage.get_favorites(callback.from_user.id)

    if not favorites:
        await callback.message.edit_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=get_favorites_menu()
        )
        return

    await callback.message.edit_text(
        "üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:\n\n" +
        format_user_list(favorites),
        reply_markup=get_favorites_menu()
    )
    await state.set_state(FavoriteStates.waiting_for_remove_city)


@router.message(FavoriteStates.waiting_for_remove_city, TextLengthFilter(min_length=2, max_length=50))
async def process_remove_favorite(message: Message, state: FSMContext):
    city = message.text.strip().title()

    success = await storage.remove_favorite(message.from_user.id, city)

    if success:
        await message.answer(
            f"‚úÖ –ì–æ—Ä–æ–¥ '{city}' —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!",
            reply_markup=get_favorites_menu()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–¥–∞–ª–∏–ª –≥–æ—Ä–æ–¥ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {city}")
    else:
        await message.answer(
            f"‚ùå –ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º.",
            reply_markup=get_favorites_menu()
        )

    await state.clear()
    await storage.update_user_activity(message.from_user.id)


@router.callback_query(F.data == "stats")
async def stats_callback(callback: CallbackQuery):
    stats = await storage.get_statistics()
    user_favorites = await storage.get_favorites(callback.from_user.id)

    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {stats.get('total_users', 0)}
üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É: {stats.get('total_requests', 0)}
‚≠ê –í–∞—à–∏—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {len(user_favorites)}

{format_user_list(user_favorites) if user_favorites else "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"}
"""

    await callback.message.edit_text(
        stats_text,
        reply_markup=get_main_menu()
    )
    await storage.update_user_activity(callback.from_user.id)


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )