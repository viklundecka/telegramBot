from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging
import asyncio
from datetime import datetime, timedelta

from config.settings import ADMIN_IDS
from filters.admin_filter import AdminFilter
from keyboards.inline import get_main_menu, get_admin_menu, get_admin_confirm_keyboard, get_admin_ban_keyboard, get_admin_cache_keyboard
from storage.json_storage import JSONStorage
from states import AdminStates
from services.api_client import WeatherstackAPI, CatFactsAPI

router = Router()
storage = JSONStorage()
logger = logging.getLogger(__name__)


@router.message(Command("admin"), AdminFilter(ADMIN_IDS))
async def admin_command(message: Message):
    stats = await storage.get_statistics()
    all_users = await storage.get_all_users()
    banned_users = await storage.get_banned_users()

    admin_text = f"""
üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(all_users) - len(banned_users)}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(banned_users)}
üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}
üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {stats.get('bot_started', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}

üïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

    await message.answer(admin_text, reply_markup=get_admin_menu(), parse_mode="Markdown")
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    stats = await storage.get_statistics()

    data = await storage.load_data()
    users_data = data.get("users", {})
    banned_users = data.get("banned_users", {})
    total_favorites = sum(len(favs) for favs in data.get("favorites", {}).values())

    now = datetime.now()
    yesterday = now - timedelta(days=1)
    active_today = 0

    for user_id, user_info in users_data.items():
        try:
            last_activity = datetime.fromisoformat(user_info.get('last_activity', '2020-01-01 00:00:00'))
            if last_activity > yesterday:
                active_today += 1
        except:
            pass

    city_counts = {}
    for user_favs in data.get("favorites", {}).values():
        for city in user_favs:
            city_counts[city] = city_counts.get(city, 0) + 1

    top_cities = sorted(city_counts.items(), key=lambda x: x[1], reverse=True)[:5]
    top_cities_text = "\n".join([f"‚Ä¢ {city}: {count}" for city, count in top_cities])

    users_by_registration = []
    for user_id, user_info in users_data.items():
        try:
            first_seen = datetime.fromisoformat(user_info.get('first_seen', '2020-01-01 00:00:00'))
            users_by_registration.append((user_id, user_info, first_seen))
        except:
            users_by_registration.append((user_id, user_info, datetime(2020, 1, 1)))

    users_by_registration.sort(key=lambda x: x[2], reverse=True)
    recent_users = users_by_registration[:10]

    recent_users_text = []
    for user_id, user_info, _ in recent_users:
        username = user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        status = "üö´" if user_id in banned_users else "‚úÖ"
        recent_users_text.append(f"{status} {user_id} (@{username})")

    detailed_stats = f"""
üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_today}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(banned_users)}

üìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}
‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {total_favorites}

üèÜ **–¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤:**
{top_cities_text if top_cities_text else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üì± **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
{chr(10).join(recent_users_text) if recent_users_text else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üöÄ **–ó–∞–ø—É—Å–∫:** {stats.get('bot_started', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
"""

    await callback.message.edit_text(
        detailed_stats,
        reply_markup=get_admin_menu(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üì¢ **–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞:\n\n"
        "‚ö†Ô∏è *–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.*",
        reply_markup=get_admin_menu(),
        parse_mode="Markdown"
    )

    await state.set_state(AdminStates.waiting_for_broadcast_message)
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")


@router.message(AdminStates.waiting_for_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    broadcast_text = message.text

    confirm_text = f"""
üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**

**–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
{broadcast_text}

‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.

–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É?
"""

    await message.answer(
        confirm_text,
        reply_markup=get_admin_confirm_keyboard("broadcast"),
        parse_mode="Markdown"
    )

    await state.update_data(broadcast_text=broadcast_text)


@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = await state.get_data()
    broadcast_text = data.get("broadcast_text")

    if not broadcast_text:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=get_admin_menu()
        )
        await state.clear()
        return

    all_users = await storage.get_all_users()

    await callback.message.edit_text(
        f"üì§ **–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...**\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(all_users)}\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{len(all_users)}",
        parse_mode="Markdown"
    )

    success_count = 0
    failed_count = 0

    bot = callback.bot

    for i, user_id in enumerate(all_users):
        try:
            await bot.send_message(
                user_id,
                f"üì¢ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:**\n\n{broadcast_text}",
                parse_mode="Markdown"
            )
            success_count += 1

            if (i + 1) % 10 == 0 or i == len(all_users) - 1:
                await callback.message.edit_text(
                    f"üì§ **–†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{len(all_users)}\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"–û—à–∏–±–∫–∏: {failed_count}",
                    parse_mode="Markdown"
                )

            await asyncio.sleep(0.1)

        except Exception as e:
            failed_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    final_text = f"""
‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**
‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}
‚ùå –û—à–∏–±–∫–∏: {failed_count}
üì± –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}

üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

    await callback.message.edit_text(
        final_text,
        reply_markup=get_admin_menu(),
        parse_mode="Markdown"
    )

    await state.clear()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {success_count} —É—Å–ø–µ—à–Ω–æ, {failed_count} –æ—à–∏–±–æ–∫")


@router.callback_query(F.data == "admin_cache")
async def admin_cache_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    from config.settings import WEATHERSTACK_API_KEY
    weather_api = WeatherstackAPI(WEATHERSTACK_API_KEY) if WEATHERSTACK_API_KEY else None
    cat_api = CatFactsAPI()

    cache_info = f"""
üîß **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º**

üå§ **Weather API –∫—ç—à:**
–ó–∞–ø–∏—Å–µ–π: {len(weather_api.cache) if weather_api else 0}

üê± **Cat Facts –∫—ç—à:**
–ó–∞–ø–∏—Å–µ–π: {len(cat_api.cache)}

üíæ **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞:** ~{_calculate_cache_size(weather_api, cat_api)} KB
"""

    await callback.message.edit_text(
        cache_info,
        reply_markup=get_admin_cache_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "clear_cache")
async def clear_cache_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    from config.settings import WEATHERSTACK_API_KEY
    weather_api = WeatherstackAPI(WEATHERSTACK_API_KEY) if WEATHERSTACK_API_KEY else None
    cat_api = CatFactsAPI()

    if weather_api:
        weather_api.cache.clear()
    cat_api.cache.clear()

    await callback.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω!", show_alert=True)

    await callback.message.edit_text(
        "‚úÖ **–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!**\n\n"
        "–í—Å–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n"
        "–°–ª–µ–¥—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ API.",
        reply_markup=get_admin_menu(),
        parse_mode="Markdown"
    )

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—á–∏—Å—Ç–∏–ª –∫—ç—à")


@router.callback_query(F.data == "cancel_broadcast")
async def cancel_broadcast(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå **–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**",
        reply_markup=get_admin_menu(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = await storage.load_data()
    users_data = data.get("users", {})
    banned_users = data.get("banned_users", {})

    now = datetime.now()
    yesterday = now - timedelta(days=1)
    week_ago = now - timedelta(days=7)

    active_today = 0
    active_week = 0

    users_by_activity = []
    for user_id, user_info in users_data.items():
        try:
            last_activity = datetime.fromisoformat(user_info.get('last_activity', '2020-01-01 00:00:00'))
            users_by_activity.append((user_id, user_info, last_activity))

            if last_activity > yesterday:
                active_today += 1
            if last_activity > week_ago:
                active_week += 1
        except:
            users_by_activity.append((user_id, user_info, datetime(2020, 1, 1)))

    users_by_activity.sort(key=lambda x: x[2], reverse=True)

    top_users = users_by_activity[:10]
    users_list = []

    for user_id, user_info, last_activity in top_users:
        username = user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user_id in banned_users else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        activity_str = last_activity.strftime('%d.%m %H:%M') if last_activity.year > 2020 else "–î–∞–≤–Ω–æ"
        request_count = user_info.get('request_count', 0)

        users_list.append(f"‚Ä¢ {user_id} (@{username})\n  {status} | {request_count} –∑–∞–ø—Ä–æ—Å–æ–≤ | {activity_str}")

    users_text = f"""
üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —Å—É—Ç–∫–∏: {active_today}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {active_week}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(banned_users)}

üì± **–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
{chr(10).join(users_list) if users_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

‚ÑπÔ∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏*
"""

    await callback.message.edit_text(
        users_text,
        reply_markup=get_admin_ban_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "ban_user")
async def ban_user_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üö´ **–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n\n"
        "‚ö†Ô∏è *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞*\n"
        "üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /allusers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*",
        reply_markup=get_admin_ban_keyboard(),
        parse_mode="Markdown"
    )

    await state.set_state(AdminStates.waiting_for_ban_user_id)
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


@router.message(AdminStates.waiting_for_ban_user_id)
async def process_ban_user_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return

    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª ID –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {message.text}")

    try:
        user_id = int(message.text.strip())

        if user_id in ADMIN_IDS:
            await message.answer(
                "‚ùå **–û—à–∏–±–∫–∞**\n\n–ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
                reply_markup=get_admin_ban_keyboard(),
                parse_mode="Markdown"
            )
            await state.clear()
            return

        user_info = await storage.get_user_info(user_id)
        if not user_info:
            await message.answer(
                f"‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /allusers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=get_admin_ban_keyboard(),
                parse_mode="Markdown"
            )
            await state.clear()
            return

        is_banned = await storage.is_user_banned(user_id)
        if is_banned:
            await message.answer(
                f"‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.",
                reply_markup=get_admin_ban_keyboard(),
                parse_mode="Markdown"
            )
            await state.clear()
            return

        username = user_info.get("username", "–ù–µ —É–∫–∞–∑–∞–Ω")
        confirm_text = f"""
üö´ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_id} (@{username})
**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user_info.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
**–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–Ω–æ:** {user_info.get('request_count', 0)}

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
"""

        await message.answer(confirm_text, parse_mode="Markdown")
        await state.update_data(ban_user_id=user_id)
        await state.set_state(AdminStates.waiting_for_ban_reason)
        logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789",
            reply_markup=get_admin_ban_keyboard(),
            parse_mode="Markdown"
        )


@router.message(AdminStates.waiting_for_ban_reason)
async def process_ban_reason(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return

    data = await state.get_data()
    user_id = data.get("ban_user_id")
    reason = message.text.strip()

    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–≤–µ–ª –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {reason}")

    if not reason or len(reason) > 200:
        await message.answer(
            "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞**\n\n"
            "–ü—Ä–∏—á–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–Ω–æ–≤–∞:",
            parse_mode="Markdown"
        )
        return

    success = await storage.ban_user(user_id, reason, message.from_user.id)

    if success:
        try:
            await message.bot.send_message(
                user_id,
                f"üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã**\n\n"
                f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
                f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                parse_mode="Markdown"
            )
            notification_status = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        except Exception as e:
            notification_status = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        await message.answer(
            f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
            f"**ID:** {user_id}\n"
            f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
            f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {notification_status}",
            reply_markup=get_admin_ban_keyboard(),
            parse_mode="Markdown"
        )

        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    else:
        await message.answer(
            "‚ùå **–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_admin_ban_keyboard(),
            parse_mode="Markdown"
        )

    await state.clear()


@router.callback_query(F.data == "unban_user")
async def unban_user_callback(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    banned_users = await storage.get_banned_users()

    if not banned_users:
        await callback.message.edit_text(
            "‚úÖ **–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã.",
            reply_markup=get_admin_ban_keyboard(),
            parse_mode="Markdown"
        )
        return

    banned_list = []
    for user_id, ban_info in list(banned_users.items())[:10]:
        reason = ban_info.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')[:30]
        banned_date = ban_info.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]
        banned_list.append(f"‚Ä¢ {user_id} - {reason} ({banned_date})")

    unban_text = f"""
üö´ **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**

üìä –í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(banned_users)}

{chr(10).join(banned_list)}
{"..." if len(banned_users) > 10 else ""}

–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:
"""

    await callback.message.edit_text(
        unban_text,
        reply_markup=get_admin_ban_keyboard(),
        parse_mode="Markdown"
    )

    await state.set_state(AdminStates.waiting_for_unban_user_id)
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")


@router.message(AdminStates.waiting_for_unban_user_id)
async def process_unban_user_id(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        await state.clear()
        return

    try:
        user_id = int(message.text.strip())

        is_banned = await storage.is_user_banned(user_id)
        if not is_banned:
            await message.answer(
                f"‚ö†Ô∏è **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.",
                reply_markup=get_admin_ban_keyboard(),
                parse_mode="Markdown"
            )
            await state.clear()
            return

        ban_info = await storage.get_ban_info(user_id)

        success = await storage.unban_user(user_id, message.from_user.id)

        if success:
            try:
                await message.bot.send_message(
                    user_id,
                    f"‚úÖ **–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã**\n\n"
                    f"**–í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                    parse_mode="Markdown"
                )
                notification_status = "‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            except Exception as e:
                notification_status = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            await message.answer(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                f"**ID:** {user_id}\n"
                f"**–ë—ã–ª–∞ –ø—Ä–∏—á–∏–Ω–∞:** {ban_info.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:** {ban_info.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}\n"
                f"**–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"**–°—Ç–∞—Ç—É—Å:** {notification_status}",
                reply_markup=get_admin_ban_keyboard(),
                parse_mode="Markdown"
            )

            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await message.answer(
                "‚ùå **–û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=get_admin_ban_keyboard(),
                parse_mode="Markdown"
            )

    except ValueError:
        await message.answer(
            "‚ùå **–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            parse_mode="Markdown"
        )
        return

    await state.clear()


@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    stats = await storage.get_statistics()
    all_users = await storage.get_all_users()
    banned_users = await storage.get_banned_users()

    admin_text = f"""
üîß **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(all_users) - len(banned_users)}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(banned_users)}
üìà –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}
üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {stats.get('bot_started', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}

üïê **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

    await callback.message.edit_text(admin_text, reply_markup=get_admin_menu(), parse_mode="Markdown")


def _calculate_cache_size(weather_api, cat_api):
    size = 0
    if weather_api:
        size += len(str(weather_api.cache))
    size += len(str(cat_api.cache))
    return round(size / 1024, 2)


@router.message(Command("allusers"), AdminFilter(ADMIN_IDS))
async def all_users_command(message: Message):
    data = await storage.load_data()
    users_data = data.get("users", {})
    banned_users = data.get("banned_users", {})

    if not users_data:
        await message.answer("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    users_list = []
    for user_id, user_info in users_data.items():
        username = user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')
        status = "üö´" if user_id in banned_users else "‚úÖ"
        request_count = user_info.get('request_count', 0)
        first_seen = user_info.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]

        users_list.append(f"{status} {user_id} (@{username}) | {request_count} –∑–∞–ø. | —Å {first_seen}")

    chunk_size = 20
    for i in range(0, len(users_list), chunk_size):
        chunk = users_list[i:i + chunk_size]
        page_num = i // chunk_size + 1
        total_pages = (len(users_list) + chunk_size - 1) // chunk_size

        users_text = f"""
üìã **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏** (—Å—Ç—Ä. {page_num}/{total_pages})

{chr(10).join(chunk)}

‚úÖ - –ê–∫—Ç–∏–≤–µ–Ω | üö´ - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
"""

        await message.answer(users_text, parse_mode="Markdown")

        if i + chunk_size < len(users_list):
            await asyncio.sleep(1)


@router.message(Command("userinfo"), AdminFilter(ADMIN_IDS))
async def user_info_command(message: Message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n`/userinfo <user_id>`\n\n–ü—Ä–∏–º–µ—Ä: `/userinfo 123456789`",
                parse_mode="Markdown"
            )
            return

        user_id = int(parts[1])

        user_info = await storage.get_user_info(user_id)
        if not user_info:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        is_banned = await storage.is_user_banned(user_id)
        ban_info = await storage.get_ban_info(user_id) if is_banned else None

        favorites = await storage.get_favorites(user_id)

        status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if is_banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"

        info_text = f"""
üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}**

**–°—Ç–∞—Ç—É—Å:** {status}
**Username:** @{user_info.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω')}
**–ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:** {user_info.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user_info.get('last_activity', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤:** {user_info.get('request_count', 0)}

**–ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:** {len(favorites)}
{chr(10).join([f"‚Ä¢ {city}" for city in favorites]) if favorites else "–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö"}
"""

        if is_banned and ban_info:
            info_text += f"""

üö´ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:**
**–ü—Ä–∏—á–∏–Ω–∞:** {ban_info.get('reason', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
**–î–∞—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** {ban_info.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}
**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª:** {ban_info.get('banned_by', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""

        await message.answer(info_text, parse_mode="Markdown")

    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")